// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ARM_H
#define ARM_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Arm: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	Arm();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	std::shared_ptr<frc::SpeedController> armMotor;
	std::shared_ptr<frc::AnalogInput> angle;
	double Get_Angle();
	const double ERROR_MARGIN = 0.1; //The degrees you can be off from the angle goal

	// Values which need calibration:
	const double CHAIN_SLOP = 5.0; //The angle that the arm changes due to slop in the chain
	const double ANGLE_OFFSET = 0.0; // Degrees in which the angle is offset from 0. Used in Get_Angle()
	const double UPPER_LIMIT = 265.0; //Highest we need to go
	const double LOWER_LIMIT = 152.0; //Lowest we need to go

	/*
	 *******************************************************************
	 * Trying out some PID stuff. Implementation is in Premade3.
	 * Don't worry about it. Uses the stuff below:
	 */

	const double kF = 0.0; // feed-forward term
	const double kP = 0.0; // proportional term
	const double kI = 0.0; // integral term
	const double kD = 0.0; // derivative term

	/*
	 * End of PID stuff.
	 *******************************************************************
	 */
};

#endif
