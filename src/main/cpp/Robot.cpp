// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <frc/Commands/Scheduler.h>
#include <frc/SmartDashboard/SmartDashboard.h>
#include "frc/DriverStation.h"

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Lift> Robot::lift;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Arm> Robot::arm;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<LightDriveCAN> Robot::leds;

void Robot::RobotInit() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    chassis.reset(new Chassis());
    lift.reset(new Lift());
    intake.reset(new Intake());
    arm.reset(new Arm());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	leds.reset(new LightDriveCAN());
	//frc::DriverStation::ReportError("Lights initialized");
	// Initializing pneumatic states
	chassis->isReversed = false;
	Robot::chassis->leftMotors->SetInverted(false);
    Robot::chassis->rightMotors->SetInverted(false);
	chassis->pneumaticStatus = false;
	intake->isExtended = false;
	intake->hatchEngaged = false;
	intake->isTilted = true;
	Robot::chassis->shifter->Set(frc::DoubleSolenoid::Value::kReverse);
	Robot::intake->clawExtend->Set(frc::DoubleSolenoid::Value::kReverse);
	Robot::intake->hatch->Set(frc::DoubleSolenoid::Value::kReverse);
	Robot::intake->clawTilt->Set(frc::DoubleSolenoid::Value::kForward);
	
	//frc::CameraServer::GetInstance()->StartAutomaticCapture(0);

	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.SetDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	Robot::chassis->shifter->Set(frc::DoubleSolenoid::Value::kReverse);
	Robot::intake->clawExtend->Set(frc::DoubleSolenoid::Value::kReverse);
	Robot::intake->hatch->Set(frc::DoubleSolenoid::Value::kReverse);
	Robot::intake->clawTilt->Set(frc::DoubleSolenoid::Value::kForward);

	Robot::leds->SetColor(1, LightDriveCAN::Colors::OFF);
    Robot::leds->Update();
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
	//frc::DriverStation::ReportError("Teleop Init");
}

void Robot::TeleopPeriodic() {	
	frc::Scheduler::GetInstance()->Run();
}

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {
    return frc::StartRobot<Robot>();
}
#endif
