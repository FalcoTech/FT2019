// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/Premade3.h"
#include <math.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Premade3::Premade3(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    Requires(Robot::arm.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Premade3::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void Premade3::Execute() {
    currentAngle = Robot::arm->Get_Angle();
    previousError = currentError;
    currentError = currentAngle - angleGoal;
    angleProportion = currentError / angleGoal;
    feedForward = Robot::arm->kF * cos(currentAngle);
    integral += currentError * 0.02; // 0.02 because that's the cycle rate (50 Hz, 20ms)
    derivative = (currentError - previousError) / 0.02; // change in error w.r.t. time

    output = feedForward + (Robot::arm->kP * angleProportion)
            + (Robot::arm->kI * integral) + (Robot::arm->kD * derivative);
    
    Robot::arm->armMotor->Set(output);
}

// Make this return true when this Command no longer needs to run execute()
bool Premade3::IsFinished() {
    if (abs(currentError) < Robot::arm->ERROR_MARGIN){
        return true;
    }
    return false;
}


// Called once after isFinished returns true
void Premade3::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Premade3::Interrupted() {

}
