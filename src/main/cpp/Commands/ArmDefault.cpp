// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/ArmDefault.h"
#include <frc/SmartDashboard/SmartDashboard.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ArmDefault::ArmDefault(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::arm.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ArmDefault::Initialize() {
    armSpeed = 0.2;
}

// Called repeatedly when this Command is scheduled to run
void ArmDefault::Execute() {
    currentAngle = Robot::arm->Get_Angle();

    frc::SmartDashboard::PutNumber("Angle Voltage", Robot::arm->angle->GetAverageVoltage());
    frc::SmartDashboard::PutNumber("Angle", currentAngle);

    // Pushing downwards on the joystick
    // if (Robot::oi->getCo_Pilot()->GetRawAxis(Robot::oi->LEFT_Y_AXIS) == 1.0 && currentAngle > Robot::arm->LOWER_LIMIT){
    if (Robot::oi->getCo_Pilot()->GetRawAxis(Robot::oi->LEFT_Y_AXIS) == 1.0){
        //Robot::arm->armMotor->Set(-armSpeed);
        Robot::arm->armMotor->Set(-1.0);
        armSpeed *= 1.05;
    }
    // Pushing upwards on the joystick
    // else if (Robot::oi->getCo_Pilot()->GetRawAxis(Robot::oi->LEFT_Y_AXIS) == -1.0 && currentAngle < Robot::arm->UPPER_LIMIT){
    else if (Robot::oi->getCo_Pilot()->GetRawAxis(Robot::oi->LEFT_Y_AXIS) == -1.0){
        //Robot::arm->armMotor->Set(armSpeed);
        Robot::arm->armMotor->Set(1.0);
        armSpeed *= 1.05;
    }
    else {
        Robot::arm->armMotor->Set(0.0);
        armSpeed = 0.2;
    }
    
}

// Make this return true when this Command no longer needs to run execute()
bool ArmDefault::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ArmDefault::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ArmDefault::Interrupted() {

}
